import pandas as pd
import numpy as np
import pickle
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.base import BaseEstimator, TransformerMixin
from sklearn.linear_model import Ridge
from utils import Parser
from fastapi import FastAPI, File, UploadFile, HTTPException, Response
from pydantic import BaseModel, conlist
from typing import List
import pandas as pd
import pickle
from io import StringIO
import nest_asyncio
import io


with open("pipeline.pkl", "rb") as f:
    pipeline = pickle.load(f)

nest_asyncio.apply()

app = FastAPI()


class Item(BaseModel):
    name: str
    year: int
    selling_price: int
    km_driven: int
    fuel: str
    seller_type: str
    transmission: str
    owner: str
    mileage: str
    engine: str
    max_power: str
    torque: str
    seats: float


class Items(BaseModel):
    objects: List[Item]


@app.post("/predict_item")
async def predict_item(item: Item) -> float:
    try:
        data = pd.DataFrame([item.dict()])
        
        predict = pipeline.predict(data).tolist()[0]
        
        return predict
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"Ошибка при обработке данных: {str(e)}")



@app.post("/predict_items")
async def predict_items(file: UploadFile = File(...)):
    try:
        content = await file.read()
        data = pd.read_csv(StringIO(content.decode("utf-8")))
        
        predicts = pipeline.predict(data)
        
        data["predicted_price"] = predicts

        output_stream = io.StringIO()
        data.to_csv(output_stream, index=False)
        csv_output = output_stream.getvalue()

        return Response(content=csv_output, media_type="text/csv")
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Ошибка обработки файла: {str(e)}")
